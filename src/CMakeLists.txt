# Generated by "yarp cmake"

# A cmake file to get started with for new YARP projects.
# It assumes you want to build an executable from source code in 
# the current directory.

set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

#########################################################################
# Control where libraries and executables are placed during the build
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")


include_directories(../QGVCore
                    ${YARP_INCLUDE_DIRS})

set(yarpviz_qt_SRCS ggraph.cpp main.cpp MainWindow.cpp QGraphicsViewEc.cpp NetworkProfiler.cpp informationdialog.cpp qosconfigdialog.cpp portloggerdialog.cpp batchqosconfdialog.cpp)

set(yarpviz_qt_HDRS ggraph.h MainWindow.h QGraphicsViewEc.h QGraphicsViewEc.h NetworkProfiler.h informationdialog.h qosconfigdialog.h portloggerdialog.h batchqosconfdialog.h)

set(yarpviz_qt_QRC_FILES ress.qrc)

set(yarpviz_qt_UI_FILES MainWindow.ui informationdialog.ui qosconfigdialog.ui portloggerdialog.ui batchqosconfdialog.ui)


qt5_add_resources(yarpviz_qt_QRC_GEN_SRCS ${yarpviz_qt_QRC_FILES})
qt5_wrap_ui(yarpviz_qt_UI_GEN_SRCS ${yarpviz_qt_UI_FILES})

source_group("Source Files" FILES ${yarpviz_qt_SRCS})
source_group("Header Files" FILES ${yarpviz_qt_HDRS})
source_group("Resources Files" FILES ${yarpviz_qt_QRC_FILES})
source_group("UI Files" FILES ${yarpviz_qt_UI_FILES})
source_group("Generated Files" FILES ${yarpviz_qt_QRC_GEN_SRCS}
                                  ${yarpviz_qt_UI_GEN_SRCS})


add_executable(${PROJECTNAME} WIN32 ${yarpviz_qt_SRCS}
                                      ${yarpviz_qt_HDRS}
                                      ${yarpviz_qt_QRC_FILES}
                                      ${yarpviz_qt_QRC_GEN_SRCS}
                                      ${yarpviz_qt_UI_GEN_SRCS}
                                      ${yarpviz_qt_UI_FILES})



#find_package(Qt5PrintSupport REQUIRED)
target_link_libraries(${PROJECTNAME} ${YARP_LIBRARIES} qgvcore Qt5::Widgets Qt5::Gui) 

if(WIN32)
    target_link_libraries(${PROJECTNAME} qgvcore Qt5::WinMain)
endif()

install(TARGETS ${PROJECTNAME}
        EXPORT ${PROJECTNAME}
        COMPONENT runtime
        RUNTIME DESTINATION bin)
